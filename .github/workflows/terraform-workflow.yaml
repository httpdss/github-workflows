name: 'terraform-workflows'

on:
  workflow_call:
    inputs:
      working-directory:
        description: 'The working directory for the terraform workflow'
        required: true
        type: string
      force-apply:
        required: false
        description: 'Force apply terraform changes'
        type: boolean
      runner:
        description: 'The runner to use for the workflow'
        required: true
        type: string
      apply-branch:
        description: 'The branch to apply terraform changes on'
        required: true
        default: 'refs/heads/main'
        type: string
    secrets:
      repo-token:
        description: 'The GitHub token for the repository'
        required: true

jobs:
  terraform:
    name: 'run-terraform'
    runs-on: ${{ inputs.runner }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - uses: hashicorp/setup-terraform@v2

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    # - name: Invalidate lock
    #   id: invalidate-lock
    #   run: terraform force-unlock -force XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true

    - name: Reformat Plan
      id: colored-plan
      run: |
        echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}'' \
        | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt

    - name: Put Plan in Env Var
      run: |
        PLAN=$(cat plan.txt)
        echo "PLAN<<EOF" >> $GITHUB_ENV
        echo "$PLAN" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Post Plan and Apply to GitHub PR
      uses: mshick/add-pr-comment@v1
      with:
        repo-token: ${{ secrets.repo-token }}
        repo-token-user-login: 'github-actions[bot]'
        message: |
          Plan for **${{ inputs.working-directory }}**:

          ```diff
          ${{ env.PLAN }}
          ```

    - name: Terraform Apply
      if: (github.ref == inputs.apply-branch && github.event_name == 'push') || inputs.force-apply == 'true'
      run: terraform apply -auto-approve
